export const topics = [
    { label: 'Array', value: 'Array' },
    { label: 'String', value: 'String' },
    { label: 'Searching', value: 'Searching' },
    { label: 'Sorting', value: 'Sorting' },
    { label: 'Graph', value: 'Graph' },
    { label: 'Tree', value: 'Tree' },
    { label: 'Dynamic Programming', value: 'DynamicProgramming' },
    { label: 'Greedy', value: 'Greedy' },
    { label: 'Backtracking', value: 'Backtracking' },
    { label: 'Bit Manipulation', value: 'BitManipulation' },
    { label: 'Math', value: 'Math' },
    { label: 'Geometry', value: 'Geometry' },
    { label: 'Game Theory', value: 'GameTheory' },
    { label: 'Data Structure', value: 'DataStructure' },
    { label: 'Hashing', value: 'Hashing' },
    { label: 'Stack', value: 'Stack' },
    { label: 'Queue', value: 'Queue' },
    { label: 'Heap', value: 'Heap' },
    { label: 'Linked List', value: 'LinkedList' },
    { label: 'Binary Search Tree', value: 'BinarySearchTree' },
    { label: 'Binary Indexed Tree', value: 'BinaryIndexedTree' },
    { label: 'Segment Tree', value: 'SegmentTree' },
    { label: 'Trie', value: 'Trie' },
    { label: 'Disjoint Set', value: 'DisjointSet' },
    { label: 'Fenwick Tree', value: 'FenwickTree' },
    { label: 'Graph Theory', value: 'GraphTheory' },
    { label: 'Shortest Path', value: 'ShortestPath' },
    { label: 'Minimum Spanning Tree', value: 'MinimumSpanningTree' },
    { label: 'Topological Sort', value: 'TopologicalSort' },
    { label: 'Eulerian Path', value: 'EulerianPath' },
    { label: 'Bipartite Graph', value: 'BipartiteGraph' },
    { label: 'Flow Network', value: 'FlowNetwork' },
    { label: 'Network Flow', value: 'NetworkFlow' },
    { label: 'Maximum Flow', value: 'MaximumFlow' },
    { label: 'Min Cut', value: 'MinCut' },
    { label: 'Max Cut', value: 'MaxCut' },
    { label: 'Matching', value: 'Matching' },
    { label: 'Hopcroft Karp', value: 'HopcroftKarp' },
    { label: 'Dinic', value: 'Dinic' },
    { label: 'Edmonds Karp', value: 'EdmondsKarp' },
    { label: 'Ford Fulkerson', value: 'FordFulkerson' },
    { label: 'Bellman Ford', value: 'BellmanFord' },
    { label: 'Floyd Warshall', value: 'FloydWarshall' },
    { label: 'Dijkstra', value: 'Dijkstra' },
    { label: 'Johnson', value: 'Johnson' },
    { label: 'Prim', value: 'Prim' },
    { label: 'Kruskal', value: 'Kruskal' },
    { label: 'Tarjan', value: 'Tarjan' },
    { label: 'Kosaraju', value: 'Kosaraju' },
    { label: 'Suffix Array', value: 'SuffixArray' },
    { label: 'Suffix Tree', value: 'SuffixTree' },
    { label: 'LCP Array', value: 'LCPArray' },
    { label: 'Z Algorithm', value: 'ZAlgorithm' },
    { label: 'KMP Algorithm', value: 'KMPAlgorithm' },
    { label: 'Rabin Karp', value: 'RabinKarp' },
    { label: 'Other', value: 'Other' }
  ];
  