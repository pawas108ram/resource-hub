generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String?
  hashedPassword String?
  bio String?
  portfolio String?
  email String? @unique
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerified DateTime?
  profileLink String @unique @default(cuid())
  
  accounts Account[]
  ownSheet Sheet[]
  sharedSheet SheetUser[]
  ownResource Resource[]
  sharedResource ResourceUser[]
  
  ownComments Comment[]
  
  sheetsLikes SheetLikes[]
  resourceLikes ResourceLikes[]
  sheetDislikes SheetDislikes[]
  resourceDislikes ResourceDislikes[]
  commentLikes CommentLikes[]
  commentDislikes CommentDislikes[]
  questionLikes QuestionLikes[]
  questionDislikes QuestionDislikes[]
  questionSolutionLikes Solution[]
  solutionDislikes SolutionDislikes[]
  solutionLikes SolutionLikes[]
  seenSolutions SolutionViews[]
  questionStatus QuestionUserStatus[]
  tasks TaskUserStatus[]
  coins Int @default(400)
  keys Int @default(3)
  



  
  


  
}

model SheetDislikes{
  id Int @id @default(autoincrement())
  sheetId Int
  sheet Sheet @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model ResourceDislikes{
  id Int @id @default(autoincrement())
  resourceId Int
  resource Resource @relation(fields: [resourceId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}



model Account{
  id                Int  @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Sheet{
  id Int @id @default(autoincrement())
  authorId Int
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String?
  description String?
  isPublic Boolean @default(false)
  likes SheetLikes[]
  dilikes SheetDislikes[]
  
  
  
  users SheetUser[] 
  
  comments Comment[]
  folders Folder[]
  questions Question[]
  keys Int?
  status PublishStatus @default(UNPUBLISHED)
}

enum PublishStatus{
  UNPUBLISHED
  PUBLISHED
}

model Folder{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String?
  description String?
  sheetId Int
  sheet Sheet @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  
  questions Question[]
}

model SheetLikes{
  id Int @id @default(autoincrement())
  sheetId Int
  sheet Sheet @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model SheetUser{
  id Int @id @default(autoincrement())
  sheetId Int 
  sheet Sheet @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

}
model ResourceUser{
  id Int @id @default(autoincrement())
  resourceId Int
  resource Resource @relation(fields: [resourceId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

}

model Resource{
  id Int @id @default(autoincrement())
  authorId Int
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String?
  description String?
  isPublic Boolean @default(false)
  
  users ResourceUser[]
  comments Comment[]
  tags ResourceTag[]
  tasks Task[]
  
  

  
  
  likes ResourceLikes[]
  dislikes ResourceDislikes[]
  instructions String[]
  keys Int?
  status PublishStatus @default(UNPUBLISHED)


  
}

model Task {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  title            String?   // Consider making it non-nullable if it's essential
  description      String?
  resourceId       Int
  resource         Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  
  expectedDuration String    // Consider using an appropriate type for durations

  questionLinks QuestionLinks[] 
  fileLinks     FileLinks[] 
  imageLinks    ImageLinks[] 
  videoLinks    VideoLinks[] 
  websiteLinks  WebsiteLinks[]
  taskStatus   TaskUserStatus[]
}

model TaskUserStatus{
  id Int @id @default(autoincrement())
  status TaskStatus @default(UNCOMPLETE)
  taskId Int
  task Task @relation(fields: [taskId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

enum TaskStatus{
  PENDING
  COMPLETE
  UNCOMPLETE
  LATER
}

model QuestionLinks {
  id     Int    @id @default(autoincrement())
  link   String
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
}

model FileLinks {
  id     Int    @id @default(autoincrement())
  link   String
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
}
model ImageLinks{
  id     Int    @id @default(autoincrement())
  link   String
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model VideoLinks{
  id     Int    @id @default(autoincrement())
  link   String
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model WebsiteLinks{
  id     Int    @id @default(autoincrement())
  link   String
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

 



model ResourceLikes{
  id Int @id @default(autoincrement())
  resourceId Int
  resource Resource @relation(fields: [resourceId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}



model Comment{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body String?
  authorId Int
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
   
  sheetId Int?
  sheet Sheet? @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  resourceId Int?
  resource Resource? @relation(fields: [resourceId],references: [id],onDelete: Cascade)
  questionId Int?
  question Question? @relation(fields: [questionId],references: [id],onDelete: Cascade)
  solutionId Int?
  solution Solution? @relation(fields: [solutionId],references: [id],onDelete: Cascade)
  likes CommentLikes[]
  dislikes CommentDislikes[]
  replies   Comment[] @relation("CommentToReply")
  parentId  Int?
  parent    Comment?  @relation("CommentToReply", fields: [parentId], references: [id])

  

  



}



model CommentLikes{
  id Int @id @default(autoincrement())
  commentId Int
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model CommentDislikes{
  id Int @id @default(autoincrement())
  commentId Int
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}



model Question{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes QuestionLikes[]
  dislikes QuestionDislikes[]
  title String
  tags QuestionTag[]
  links String[]
  questionStatus  QuestionUserStatus[]
  
  sheetId Int?
  sheet Sheet? @relation(fields: [sheetId],references: [id],onDelete: Cascade)
  difficulty Difficulty @default(Recruit)
  folderId Int?
  folder Folder? @relation(fields: [folderId],references: [id],onDelete: Cascade)
  comments Comment[]
  solutions Solution[]



}

enum QuestionStatus{
  UNATTEMPTED
  REVISED
  SOLVED
  SKIPPED
}

model QuestionUserStatus{
  id Int @id @default(autoincrement())
  status QuestionStatus @default(UNATTEMPTED)
  questionId Int
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model QuestionLikes{
  id Int @id @default(autoincrement())
  questionId Int
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model QuestionDislikes{
  id Int @id @default(autoincrement())
  questionId Int
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Solution{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes SolutionLikes[]
  dislikes SolutionDislikes[]
  body String
  title String
  code String
  images String[]
  video String[]
  questionId Int
  question Question @relation(fields: [questionId],references: [id],onDelete: Cascade)
  comments Comment[]
  type SolutionType
  language Languages
  accessType AccessType
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  authorId Int
  timeComplexity Complexity @default(Constant)

  spaceComplexity Complexity @default(Constant)
  seenBy SolutionViews[]
}

model SolutionViews{
  id Int @id @default(autoincrement())
  solutionId Int
  solution Solution @relation(fields: [solutionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model SolutionLikes{
  id Int @id @default(autoincrement())
  solutionId Int
  solution Solution @relation(fields: [solutionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}
model SolutionDislikes{
  id Int @id @default(autoincrement())
  solutionId Int
  solution Solution @relation(fields: [solutionId],references: [id],onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}
enum AccessType{
  Public
  Private
  Protected
}
enum SolutionType{
  BruteForce
  Optimal
  Optimum
  
}
enum Languages{
  C
  Cpp
  Java
  Python
  Javascript
  Typescript
  Golang
  Rust
  Kotlin
  Swift
  Scala
  Haskell
  Clojure
  Lua
  Perl
  R
  Ruby
  Bash
  PHP
  Other
}

enum QuestionTag{
  Array
  String
  Searching
  Sorting
  Graph
  Tree
  DynamicProgramming
  Greedy
  Backtracking
  BitManipulation
  Math
  Geometry
  GameTheory
  DataStructure
  Hashing
  Stack
  Queue
  Heap
  LinkedList
  BinarySearchTree
  BinaryIndexedTree
  SegmentTree
  Trie
  DisjointSet
  FenwickTree
  GraphTheory
  ShortestPath
  MinimumSpanningTree
  TopologicalSort
  EulerianPath
  BipartiteGraph
  FlowNetwork
  NetworkFlow
  MaximumFlow
  MinCut
  MaxCut
  Matching
  HopcroftKarp
  Dinic
  EdmondsKarp
  FordFulkerson
  BellmanFord
  FloydWarshall
  Dijkstra
  Johnson
  Prim
  Kruskal
  Tarjan
  Kosaraju
  SuffixArray
  SuffixTree
  LCPArray
  ZAlgorithm
  KMPAlgorithm
  RabinKarp
  BinarySearch
  SlidingWindow
  TwoPointer
  DivideAndConquer
  Recursion
  Memoization
  NumberTheory
  SieveOfEratosthenes
  
  Other
}

enum ResourceTag {

  DataStructure
  WebDevelopment
  MachineLearning
  DeepLearning
  ArtificialIntelligence
  CompetitiveProgramming
  SystemDesign
  OperatingSystem
  Database
  Networking
  Array
  String
  Searching
  Sorting
  Graph
  Tree
  DynamicProgramming
  Greedy
  Backtracking
  BitManipulation
  Math
  Geometry
  GameTheory
  Hashing
  Stack
  Queue
  Heap
  LinkedList
  BinarySearchTree
  BinaryIndexedTree
  SegmentTree
  Trie
  DisjointSet
  FenwickTree
  GraphTheory
  ShortestPath
  MinimumSpanningTree
  TopologicalSort
  EulerianPath
  BipartiteGraph
  FlowNetwork
  NetworkFlow
  MaximumFlow
  MinCut
  MaxCut
  Matching
  HopcroftKarp
  Dinic
  EdmondsKarp
  FordFulkerson
  BellmanFord
  FloydWarshall
  Dijkstra
  Johnson
  Prim
  Kruskal
  Tarjan
  Kosaraju
  SuffixArray
  SuffixTree
  LCPArray
  ZAlgorithm
  KMPAlgorithm
  RabinKarp
  Other

}


enum Status{
  PENDING
  ACCEPTED
  REJECTED
}



enum Difficulty{
  Recruit 
Veteran
Elite 
Legendary 
}

enum Complexity{
  Constant
  Logarithmic
  Linear
  Quadratic
  Cubic
  Exponential
  Factorial
  Other

}
















